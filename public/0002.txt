from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

# Function to decrypt data using AES (CBC mode)
def decrypt_data(encrypted_data, key):
    iv = encrypted_data[:16]  # Extract the IV from the first 16 bytes
    ciphertext = encrypted_data[16:]  # The rest is the ciphertext

    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Decrypt the data
    decrypted_data = decryptor.update(ciphertext) + decryptor.finalize()

    # Remove padding
    padding_length = decrypted_data[-1]
    return decrypted_data[:-padding_length]  # Remove the padding

# Example usage:
# Load the encrypted data from a file (optional)
with open('encrypted_file.enc', 'rb') as f:
    encrypted_data = f.read()

key = os.urandom(32)  # Use the same key that was used during encryption

# Decrypt the data
decrypted_data = decrypt_data(encrypted_data, key)

print(f"Decrypted data: {decrypted_data.decode('utf-8')}")
